{"title":"code test","author":"python","description":"This was written by python","text":" // this file contains the Article class\r\n\r\nconst fs = require(\"fs\");\r\nconst hf = require(\"./helper_functions.js\");\r\n\r\nfunction Article(title, author, description, text) {\r\n    this.title = title;\r\n    this.author = author;\r\n    this.description = description;\r\n    this.text = text;\r\n    // this writes an article to disk\r\n    this.save_to_disk = function(name, update) {\r\n        let tempName = name;\r\n        let counter = 2;\r\n\r\n        if (update == \"false\")\r\n            // find un used name, not to overrite an existing article\r\n            while (fs.existsSync(tempName)) {\r\n                //console.log(tempName, \"exists\");\r\n                tempName = name + counter.toString();\r\n                counter++;\r\n            }\r\n\r\n        try {\r\n            // when we call cache_dir_exists with 1 it creates the directory\r\n            // if it is not to be found\r\n            hf.cache_dir_exists(1);\r\n            //console.log(\"filename:\", tempName);\r\n            //console.log(\"contente:\", JSON.stringify(this));\r\n\r\n            // make sure to clean the title because it is used in the list page as is\r\n            // so we don't want html tags or js code, this is not a perfect solution\r\n            // but it is an simple one to avoid using jquery to fill the entire page\r\n\r\n            // tempName.replace(/[<>(){}\\[\\]\\`'\"\\;\\$\\^\\&]/g, \"\") can be used to remove these symbols\r\n            // but you may not catch all\r\n            // so a better way is to only allow alphanumeric (and other) characters like so:\r\n            // tempName.replace(/[^a-z0-9.-_]/gi, \"\") this only allows alphanumeric dash and period and underscore\r\n            // this name is used to store the file on disk so the user doesn't really care about it\r\n            fs.writeFileSync(tempName.replace(/ /g, \"_\").replace(/[^a-z0-9.-_]/gi, \"\"), // also to replace spaces to make it easy\r\n                JSON.stringify(this), { mode:0644 });                                   // to search and copy from the terminal\r\n            return 1;\r\n        } catch (err) {\r\n            console.log(err);\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    Article,\r\n};\r\n\r\n// this is the main file that should be run\r\n\r\n// include some node.js modules\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\n\r\n// include my modules\r\nconst ar = require(\"./Article.js\");\r\nconst hf = require(\"./helper_functions.js\");\r\nconst st = require(\"./structures.js\");\r\n\r\n// default cache directory can be changed in the helper_functions.js\r\nconst cache_dir = hf.cache_dir;\r\n\r\n// express stuff\r\nconst express = require('express');\r\nconst app = express();\r\nconst bodyParser = require('body-parser');\r\n\r\nconst urlencodedParser = bodyParser.urlencoded({ extended: false });\r\n\r\n// change localhost to the machines ip in case of a problem in windows\r\nconst host = \"localhost\";\r\n// change the ip if it is used by another app on the system\r\nconst port = 8000;\r\n\r\napp.use(express.static(__dirname));\r\napp.get('/', function (req, res) {\r\n    //res.sendFile(__dirname + \"/root/\" + \"index.html\");\r\n    //res.end(doc_begin + buttons + doc_end);\r\n    res.redirect(\"/list_articles\");\r\n});\r\n\r\n// start the server\r\nvar server = app.listen(port, function () {\r\n   console.log(\"Server listening at http://%s:%s\", host, port)\r\n});\r\n\r\napp.get(\"/list_articles\", urlencodedParser, function (req, res) {\r\n    let files = \"\";\r\n\r\n    if (hf.cache_dir_exists(0))\r\n        fs.readdirSync(cache_dir).forEach(file => {\r\n            files += '<button class=\"del_article\" onclick=\"delete_article_func('' + file + '')\">'\r\n                + 'delete ' + '</button>';\r\n            files += '<button class=\"article\" onclick=\"open_article_func('' + file + '')\">'\r\n                + file.replace(/_/g, \" \") + '</button></br>';\r\n        });\r\n\r\n    if (files == \"\")\r\n        hf.print_msg(res, \"No articles to show\");\r\n    else\r\n        res.end(st.prepare_head(\"Articles list\", \"Articles\") + st.buttons + st.open_article_form\r\n            + st.open_article_script + st.delete_article_form + st.delete_article_script + files + st.doc_end);\r\n\r\n});\r\n\r\napp.get(\"/create_article\", urlencodedParser, function (req, res) {\r\n    res.end(st.prepare_head(\"Create an article\", \"New article\") + st.buttons + st.errs_pr\r\n        + st.creat_article_form + st.save_article_script + st.doc_end);\r\n});\r\n\r\napp.post(\"/save_article\", urlencodedParser, function (req, res) {\r\n    //console.log(req.body.update);\r\n    let temp = new ar.Article(req.body.title, req.body.author, req.body.description, req.body.text);\r\n\r\n    if (temp.save_to_disk(cache_dir + req.body.title, req.body.update))\r\n        if (req.body.update == \"false\")\r\n            hf.print_msg(res, \"Article written to disk\");\r\n        else\r\n            hf.print_msg(res, \"Article updated\");\r\n    else\r\n        hf.print_msg(res, \"could not write article to disk\");\r\n});\r\n\r\n// I need to put the stuff in this way, because otherwise the code might get interpreted as js\r\n// so I need to fill the gaps instead of just dumping text in to prevent interpretation\r\napp.post(\"/get_article_content\", urlencodedParser, function (req, res) {\r\n    //console.log(\"filename:\", req.body.name);\r\n    try {\r\n        var file = fs.readFileSync(cache_dir + req.body.name);\r\n    } catch (err) {\r\n        console.log(err);\r\n        hf.print_msg(res, \"could not open file\");\r\n    }\r\n\r\n    let temp = JSON.parse(file);\r\n    res.send(new ar.Article(temp.title, temp.author, temp.description, temp.text));\r\n});\r\n\r\napp.post(\"/open_article\", urlencodedParser, function (req, res) {\r\n    let delete_button = '<button class=\"form_button\" onclick=\"delete_article_func('' + req.body.name + '')\">'\r\n                + 'delete' + '</button>';\r\n\r\n    let update_button = '<button class=\"form_button\" onclick=\"save_article_func('true')\" />update</button>';\r\n    let restore_button = '<button class=\"form_button\" onclick=\"check_and_fill_form()\" />restore</button>';\r\n\r\n    res.end(st.prepare_head(\"Update article\", \"\") + st.buttons + st.errs_pr + st.create_article_form\r\n        + st.save_article_script + delete_button + update_button + restore_button + st.delete_article_form\r\n        + st.delete_article_script + st.prepare_form_script(req.body.name) + st.doc_end);\r\n});\r\n\r\napp.post(\"/delete_article\", urlencodedParser, function (req, res) {\r\n    try {\r\n        //console.log(\"deleted\", req.body.name);\r\n        fs.unlinkSync(cache_dir + req.body.name);\r\n        res.redirect('/list_articles');\r\n    } catch (err) {\r\n        console.log(err);\r\n        hf.print_msg(res, \"could not delete file\");\r\n    }\r\n});\r\n// this file contains some structures used in the html\r\n\r\n// maybe I should consider merging the open article form and script\r\n// also the delete article form and script ...\r\n\r\n// doc beginning and end\r\nfunction prepare_head(title, page_title) {\r\n    return `<!DOCTYPE HTML>\r\n    <html>\r\n        <head>\r\n            <meta charset=\"UTF-8\" />\r\n            <title>${title}</title>\r\n            <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\r\n            <script src=\"https://code.jquery.com/jquery-latest.min.js\"></script>\r\n        </head>\r\n        <body>\r\n            <div id=\"main\">\r\n                <a2 id=\"page_title\">${page_title}</a2>`;\r\n}\r\n\r\nfunction prepare_form_script(name) {\r\n    return `<script>\r\n        onload = fill_form();\r\n        function fill_form() {\r\n            let result = $.ajax({\r\n                type: \"POST\",\r\n                url: \"/get_article_content\",\r\n                data: { name: \"${name}\" },\r\n                dataType: \"json\",\r\n                async: true,\r\n                success: function set_form_defaults(rsult) {\r\n                            //console.log(result);\r\n                            //console.log(result.title);\r\n                            //console.log(result.author);\r\n                            //console.log(result.description);\r\n                            //console.log(result.text);\r\n                            $(\"#title\").val(result.title)\r\n                            $(\"#author\").val(result.author)\r\n                            $(\"#description\").val(result.description)\r\n                            $(\"#text\").val(result.text)\r\n                        }\r\n            });\r\n            document.getElementById(\"submit\").innerText = \"save draft\";\r\n        }\r\n\r\n        function check_and_fill_form() {\r\n            if (confirm(\"Are you sure you want to restore this article to its saved version?\"))\r\n                fill_form();\r\n        }\r\n    </script>\r\n    `;\r\n}\r\n\r\nconst doc_end =\r\n`       </div>\r\n    </body>\r\n</html>`;\r\n\r\n// open article\r\nconst open_article_form =\r\n`<form id=\"open_article\" action=\"/open_article\" method=\"post\">\r\n    <input id=\"article_name\"i name=\"name\" type=\"hidden\" maxlength=\"256\" />\r\n</form>`;\r\n\r\nconst open_article_script =\r\n`<script>\r\n    function open_article_func(name) {\r\n        document.getElementById(\"article_name\").value = name;\r\n        document.getElementById(\"open_article\").submit();\r\n    }\r\n</script>`;\r\n\r\n// delete article\r\nconst delete_article_form =\r\n`<form id=\"delete_article\" action=\"/delete_article\" method=\"post\">\r\n    <input id=\"delete_article_name\"i name=\"name\" type=\"hidden\" maxlength=\"256\" />\r\n</form>`;\r\n\r\nconst delete_article_script =\r\n`<script>\r\n    function delete_article_func(name) {\r\n        if (confirm(\"Are you sure you want to delete this article\", name, \"?\")) {\r\n            document.getElementById(\"delete_article_name\").value = name;\r\n            document.getElementById(\"delete_article\").submit();\r\n        }\r\n    }\r\n</script>`;\r\n\r\n// save article\r\n\r\n// remove if statements below to allow an article to have an empty description or author for example\r\n// *NOTE* never allow the title to be empty because it would be the file name and it doesn't make sense\r\nconst save_article_script =\r\n`<script>\r\n    function save_article_func(update) {\r\n    let msg = \"\";\r\n        if (document.getElementById(\"title\").value == \"\")\r\n            msg += \"title can't be empty</br>\";\r\n        if (document.getElementById(\"author\").value == \"\")\r\n            msg += \"author can't be empty</br>\";\r\n        if (document.getElementById(\"description\").value == \"\")\r\n            msg += \"description can't be empty</br>\";\r\n        if (document.getElementById(\"text\").value == \"\")\r\n            msg += \"article body can't be empty</br>\";\r\n\r\n        //console.log(update);\r\n\r\n        if (msg != \"\")\r\n            document.getElementById(\"errors\").innerHTML = msg;\r\n        else {\r\n            if (update == \"false\") {\r\n                document.getElementById(\"bool_update\").value = \"false\";\r\n                document.getElementById(\"create_article\").submit();\r\n            } else if (update == \"true\" && confirm(\"Are you sure you want to overwrite this article\",\r\n                        document.getElementById(\"title\").value, \"?\")) {\r\n                document.getElementById(\"bool_update\").value = \"true\";\r\n                document.getElementById(\"create_article\").submit();\r\n            }\r\n        }\r\n    }\r\n</script>`;\r\n\r\nconst create_article_form =\r\n`<form id=\"create_article\" action=\"/save_article\" method=\"post\">\r\n    <a class=\"input_title\">title:</a>\r\n    <input id=\"title\" name=\"title\" maxlength=\"256\" />\r\n    <a class=\"input_title\">author:</a>\r\n    <input id=\"author\" name=\"author\" maxlength=\"256\" />\r\n    <a class=\"input_title\">description:</a>\r\n    <textarea id=\"description\" name=\"description\" rows=\"4\" cols=\"32\"></textarea>\r\n    <a class=\"input_title\">text:</a>\r\n    <textarea id=\"text\" name=\"text\" rows=\"32\" cols=\"64\"></textarea>\r\n    <input id=\"bool_update\" name=\"update\" type=\"hidden\" />\r\n</form>\r\n<button id=\"submit\" class=\"form_button\" onclick=\"save_article_func('false')\">create article</button>`;\r\n\r\n// the header buttons\r\nconst buttons =\r\n`<div id=\"header_div\">\r\n    <form class=\"header_form\" action=\"/list_articles\" method=\"get\">\r\n        <input class=\"header_button\" type=\"submit\" value=\"List articles\">\r\n    </form>\r\n    <form class=\"header_form\" action=\"/create_article\" method=\"get\">\r\n        <input class=\"header_button\" type=\"submit\" value=\"Create an article\">\r\n    </form>\r\n</div>`;\r\n\r\n// error paragraph\r\nconst errs_pr = '<p id=\"errors\"></p>';\r\n\r\nmodule.exports = {\r\n    prepare_head, prepare_form_script, doc_end, open_article_form, open_article_script,\r\n    delete_article_form, delete_article_script, save_article_script, create_article_form,\r\n    buttons, errs_pr\r\n};\r\n\r\n/* elements styles */\r\n\r\nbody {\r\n    background-color: #F0FFFF;\r\n}\r\n\r\na {\r\n    font-size: 1.5em;\r\n}\r\n\r\nform {\r\n    padding-left: 30px;\r\n}\r\n\r\n/* main body */\r\n#main {\r\n    margin-bottom: 20px;\r\n    width: 100%;\r\n}\r\n\r\n#page_title {\r\n    display: block;\r\n    text-align: center;\r\n    font-size: 2em;\r\n    top: 40px;\r\n}\r\n\r\n/* header and header buttons */\r\n\r\n#header_div {\r\n    display: block;\r\n    float: left;\r\n    top: 0px;\r\n    width: 100%;\r\n    height: 5%;\r\n    min-height: 25px;\r\n    padding: 0px;\r\n    margin: 0px;\r\n}\r\n\r\n.header_form {\r\n    display: inline;\r\n    padding: 0px;\r\n    margin: 0px;\r\n}\r\n\r\n.header_button {\r\n    width: 30%;\r\n    display: inline;\r\n    padding: 10px 5% 10px 5%;\r\n    margin: 10px 7% 10px 7%;\r\n    max-height: 40px;\r\n    min-width: 200px;\r\n    background-color: #FFF8DC;\r\n    border-color: #2F4F4F;\r\n    color: #808080;\r\n}\r\n\r\n/* create article form and its elementes */\r\n\r\n#create_article * {\r\n    display: block;\r\n    padding: 4px;\r\n}\r\n\r\n#create_article {\r\n    display: block;\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n.form_button {\r\n    position: relative;\r\n    left: 40px;\r\n    padding: 10px;\r\n    margin: 10px;\r\n    background-color: #E6E6FA;\r\n    color: black;\r\n}\r\n\r\n/* other ui elements */\r\n\r\n.del_article {\r\n    padding: 3px;\r\n    margin: 20px;\r\n    left: 40%;\r\n}\r\n\r\n#msg {\r\n    position: absolute;\r\n    display: block;\r\n    top: 15%;\r\n}\r\n\r\n.article {\r\n    padding: 7px;\r\n    margin: 20px;\r\n    background-color: #ADD8E6;\r\n    border: unset;\r\n    border-radius: 10px;\r\n}\r\n\r\n"}